#ifndef {{curve_name_maj}}_G2_HPP_
#define {{curve_name_maj}}_G2_HPP_
#include <vector>

#include <libff/algebra/curves/{{curve_name}}/{{curve_name}}_init.hpp>
#include <libff/algebra/curves/curve_utils.hpp>

namespace libff {

class {{curve_name}}_G2;
std::ostream& operator<<(std::ostream &, const {{curve_name}}_G2&);
std::istream& operator>>(std::istream &, {{curve_name}}_G2&);

class {{curve_name}}_G2 {
public:
#ifdef PROFILE_OP_COUNTS
    static long long add_cnt;
    static long long dbl_cnt;
#endif
    static std::vector<size_t> wnaf_window_table;
    static std::vector<size_t> fixed_base_exp_window_table;
    static {{curve_name}}_G2 G2_zero;
    static {{curve_name}}_G2 G2_one;

    typedef {{curve_name}}_Fq base_field;
    typedef {{curve_name}}_Fq2 twist_field;
    typedef {{curve_name}}_Fr scalar_field;

    {{curve_name}}_Fq2 X, Y, Z;

    // using Jacobian coordinates
    {{curve_name}}_G2();
    {{curve_name}}_G2(const {{curve_name}}_Fq2& X, const {{curve_name}}_Fq2& Y, const {{curve_name}}_Fq2& Z) : X(X), Y(Y), Z(Z) {};

    static {{curve_name}}_Fq2 mul_by_b(const {{curve_name}}_Fq2 &elt);

    void print() const;
    void print_coordinates() const;

    void to_affine_coordinates();
    void to_special();
    bool is_special() const;

    bool is_zero() const;

    bool operator==(const {{curve_name}}_G2 &other) const;
    bool operator!=(const {{curve_name}}_G2 &other) const;

    {{curve_name}}_G2 operator+(const {{curve_name}}_G2 &other) const;
    {{curve_name}}_G2 operator-() const;
    {{curve_name}}_G2 operator-(const {{curve_name}}_G2 &other) const;

    {{curve_name}}_G2 add(const {{curve_name}}_G2 &other) const;
    {{curve_name}}_G2 mixed_add(const {{curve_name}}_G2 &other) const;
    {{curve_name}}_G2 dbl() const;
    {{curve_name}}_G2 mul_by_q() const;

    bool is_well_formed() const;

    static {{curve_name}}_G2 zero();
    static {{curve_name}}_G2 one();
    static {{curve_name}}_G2 random_element();

    static size_t size_in_bits() { return twist_field::size_in_bits() + 1; }
    static bigint<base_field::num_limbs> base_field_char() { return base_field::field_char(); }
    static bigint<scalar_field::num_limbs> order() { return scalar_field::field_char(); }

    friend std::ostream& operator<<(std::ostream &out, const {{curve_name}}_G2 &g);
    friend std::istream& operator>>(std::istream &in, {{curve_name}}_G2 &g);

    static void batch_to_special_all_non_zeros(std::vector<{{curve_name}}_G2> &vec);
};

template<mp_size_t m>
{{curve_name}}_G2 operator*(const bigint<m> &lhs, const {{curve_name}}_G2 &rhs)
{
    return scalar_mul<{{curve_name}}_G2, m>(rhs, lhs);
}

template<mp_size_t m, const bigint<m>& modulus_p>
{{curve_name}}_G2 operator*(const Fp_model<m,modulus_p> &lhs, const {{curve_name}}_G2 &rhs)
{
    return scalar_mul<{{curve_name}}_G2, m>(rhs, lhs.as_bigint());
}


} // libff
#endif // {{curve_name_maj}}_G2_HPP_
